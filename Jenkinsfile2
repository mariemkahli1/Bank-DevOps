pipeline {
    agent any
    parameters {
        string(name: 'BASE_IMAGE', defaultValue: 'php:apache', description: 'Base Docker image')
        text(name: 'APP_DIRECTORIES', defaultValue: 'src/', description: 'Comma-separated list of directories/files to copy into Docker image')
        string(name: 'SCRIPT_NAME', defaultValue: 'index.php', description: 'Name of the PHP script to run')
    }

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('mariem-dockerHub') // Docker Hub credentials ID
        DOCKER_IMAGE_NAME = 'flare-bank'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare Environment') {
            steps {
                script {
                    // Vérifier si le fichier .env existe, sinon le créer
                    if (!fileExists('.env')) {
                        writeFile file: '.env', text: '''
                        # Ajouter ici vos variables d'environnement par défaut
                        APP_ENV=production
                        DB_HOST=localhost
                        DB_USER=root
                        DB_PASSWORD=secret
                        '''
                    }
                }
            }
        }

        stage('Generate Dockerfile') {
            steps {
                script {
                    // Générer le Dockerfile dynamiquement
                    def copyCommands = ''
                    def directories = params.APP_DIRECTORIES.split(',')

                    directories.each { dir ->
                        copyCommands += "COPY ${dir.trim()} /var/www/html/\n"
                    }

                    writeFile file: 'Dockerfile', text: """
                    FROM ${params.BASE_IMAGE}
                    ${copyCommands}
                    WORKDIR /var/www/html
                    RUN docker-php-ext-install mysqli pdo pdo_mysql
                    RUN apt-get update && \\
                        apt-get install -y --no-install-recommends curl && \\
                        apt-get clean && rm -rf /var/lib/apt/lists/*
                    COPY .env /var/www/html/.env
                    EXPOSE 80
                    HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\
                      CMD curl -f http://localhost/ || exit 1
                    RUN groupadd -r appgroup && useradd -r -g appgroup -d /home/appuser -s /bin/bash appuser
                    RUN chown -R appuser:appgroup /var/www/html
                    USER appuser
                    CMD ["apache2-foreground"]
                    """
                    env.DOCKER_IMAGE = "${DOCKER_IMAGE_NAME}:latest"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Construire l'image Docker
                    docker.build(env.DOCKER_IMAGE)
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Se connecter à Docker Hub et pousser l'image
                    docker.withRegistry('https://index.docker.io/v1/', 'mariem-dockerHub') {
                        docker.image(env.DOCKER_IMAGE).push('latest')
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
